https://host.godaddy.com/webhosting/cpanel/account/4b2a4b19-0f45-4c9b-b600-b4a837e5d68b/view

50.63.7.156
jejtxlk4zmlg
Marathon#262

source /home/jejtxlk4zmlg/virtualenv/options/2.7/bin/activate && cd /home/jejtxlk4zmlg/options

https://p3plzcpnl505185.prod.phx3.secureserver.net:2083/cpsess3944159500/frontend/jupiter/index.html?login=1&post_login=86081395702217


SSH
(base) ganderson@Glenns-MacBook-Pro-3.local:~$ssh jejtxlk4zmlg@50.63.7.156
jejtxlk4zmlg@50.63.7.156's password: 
jejtxlk4zmlg@p3plzcpnl505185 [~]$ 



# DO NOT REMOVE. CLOUDLINUX PASSENGER CONFIGURATION BEGIN
PassengerAppRoot "/home/jejtxlk4zmlg/options"
PassengerBaseURI "/"
PassengerPython "/home/jejtxlk4zmlg/options/env/lib/python3.12"
PassengerAppLogFile "/home/jejtxlk4zmlg/options/logs/app.log"
# DO NOT REMOVE. CLOUDLINUX PASSENGER CONFIGURATION END

# Turn off directory index if necessary
Options -Indexes



source /home/jejtxlk4zmlg/virtualenv/options/3.9/bin/activate && cd /home/jejtxlk4zmlg/options


login
https://www.geeksforgeeks.org/login-and-registration-project-using-flask-and-mysql/

maybe add encryption and forgot password
https://freelancefootprints.substack.com/p/yet-another-password-reset-tutorial



Implementing user login and registration in a Flask app typically involves the following steps: 
1. Installation: 
pip install Flask Flask-Login Flask-WTF Werkzeug

2. Create a User Model: 
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash

db = SQLAlchemy()

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

3. Create Login and Registration Forms: 
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired, EqualTo, ValidationError

class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Log In')

class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired(), EqualTo('confirm_password')])
    confirm_password = PasswordField('Confirm Password', validators=[DataRequired()])
    submit = SubmitField('Register')

4. Implement Login and Registration Routes: 
from flask import Flask, render_template, redirect, url_for, flash
from flask_login import login_user, logout_user, login_required

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key' 
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db' 
db.init_app(app)

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and user.check_password(form.password.data):
            login_user(user)
            return redirect(url_for('index'))
        else:
            flash('Invalid username or password')
    return render_template('login.html', form=form)

@app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        user = User(username=form.username.data)
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        flash('Registration successful!')
        return redirect(url_for('login'))
    return render_template('register.html', form=form)

5. Create Templates: 
Create login.html and register.html templates to render the login and registration forms. 
Important: 

• Security: Ensure you handle passwords securely by hashing them using a strong hashing algorithm. 
• Database: Choose a suitable database for your application and configure it accordingly. 
• Error Handling: Implement proper error handling and validation to protect your application from security vulnerabilities. 
• User Experience: Provide a user-friendly login and registration experience. 


Generative AI is experimental.

[-] https://www.kevin7.net/post_detail/user-registration-in-flask-backend-part-1-of-2[-] https://github.com/ginduc/odoo-flask-ng[-] https://python-commandments.org/flask-authentication/[-] https://blog.csdn.net/m0_37573740/article/details/130996037[-] https://stackoverflow.com/questions/76666122/flask-validation-not-logging-me-in[-] https://stackoverflow.com/questions/54422551/flask-login-remember-me-working-automatically[-] https://www.instructables.com/IOT-Based-Smart-Security-Surveillance-Robot/[-] https://stackoverflow.com/questions/57750075/wtforms-is-there-an-object-field[-] https://www.kevin7.net/post_detail/user-registration-in-flask-backend-part-1-of-2[-] https://github.com/ginduc/odoo-flask-ng[-] https://python-commandments.org/flask-authentication/


from werkzeug.security import generate_password_hash, check_password_hash

# When registering a new user
hashed_password = generate_password_hash(password, method='pbkdf2:sha256')
